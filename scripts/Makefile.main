# Do not:
# o  use make's built-in rules and variables
#    (this increases performance and avoid hard-to-debug behavour);
# o  print "Entering directory ...";
MAKEFLAGS += --no-builtin-rules
MAKEFLAGS += --no-builtin-variables
MAKEFLAGS += --no-print-directory
.SUFFIXES:

# To put more focus on warnings, be less verbose as default
# Use 'make V=1' to see the full commands

ifeq ("$(origin V)", "command line")
  KBUILD_VERBOSE := $(V)
endif
ifndef KBUILD_VERBOSE
  KBUILD_VERBOSE := 0
endif
ifneq ($(KBUILD_VERBOSE),0)
  VERBOSE:=y
endif
export KBUILD_VERBOSE

# Beautify output
ifeq ($(KBUILD_VERBOSE),1)
  Q 	:=
else
  Q	:= @
endif
export Q

####################################
# for sparse (or some other checker)
ifeq ("$(origin C)", "command line")
  KBUILD_CHECKSRC := $(C)
  CHECK		?= sparse
  CHECKFLAGS	?= -D__STDC__ -D__STDC_HOSTED__=0 -Dunix -D__unix__ \
		-Wno-decl \
		-Wbitwise
endif
ifndef KBUILD_CHECKSRC
  KBUILD_CHECKSRC := 0
endif

export KBUILD_CHECKSRC CHECK CHECKFLAGS

################################################################################
ifneq ($(filter $(no-dot-config-targets), $(MAKECMDGOALS)),)
	ifeq ($(filter-out $(no-dot-config-targets), $(MAKECMDGOALS)),)
		no-dot-config := 1
	endif
endif

ifneq ($(filter config %config,$(MAKECMDGOALS)),)
	config-targets := 1
	ifneq ($(filter-out config %config,$(MAKECMDGOALS)),)
		mixed-targets := 1
	endif
endif

##
%/.make: %/Makefile scripts/gen-makefile
	@scripts/gen-makefile .make $*

# avoid implicit rules
_all:
scripts/gen-makefile: ;
scripts/Kbuild.include: ;
scripts/Makefile.%: ;
%.cmd: ;
