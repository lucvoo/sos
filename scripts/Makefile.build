# Read .config if it exist, otherwise ignore
-include include/config/auto.conf

include scripts/Kbuild.include

CPPFLAGS	:= $(CPPFLAGS) $(CPPFLAGS-y)
CFLAGS		:= $(CFLAGS)   $(CFLAGS-y)
AFLAGS		:= $(AFLAGS)   $(AFLAGS-y)

c_flags        = -Wp,-MMD,$(dir $@).$(notdir $@).d $(NOSTDINC_FLAGS) $(CPPFLAGS) \
		 $(CFLAGS) $($(@D)/EXTRA_CFLAGS) $($(basename $@)-cflags)

a_flags        = -Wp,-MMD,$(dir $@).$(notdir $@).d $(NOSTDINC_FLAGS) $(CPPFLAGS) \
		 $(AFLAGS) $($(@D)/EXTRA_AFLAGS) $($(basename $@)-aflags)

cpp_flags      = -Wp,-MMD,$(dir $@).$(notdir $@).d $(NOSTDINC_FLAGS) $(CPPFLAGS) \
		           $($(@D)/EXTRA_CPPFLAGS) $($(basename $@)-cppflags)

# sparse stuff
ifneq ($(KBUILD_CHECKSRC),0)
	gcc_basedir:= $(shell $(CC) -print-search-dirs | head -n1 | cut -d ' ' -f 2)
	chk_flags  := -m$(CONFIG_BITS) $(CHECKFLAGS) $(CF)
	prt_checker = @echo "CHECK	$<"
	def_checker = $(shell echo|$(CPP) $(c_flags) -dD - |sed '/^\# 1 "<command-line>"/,$$d'|grep '^\#define'|sed "s/^\#define \([^ ]*\) \(.*\)/ '-D\1=\2'/")
	cmd_checker = $(Q)$(CHECK) $(chk_flags) $(def_checker) -gcc-base-dir $(gcc_basedir) $(c_flags) $<
else
	prt_checker = @:
	cmd_checker = @:
endif
# Compile C sources (.c)
# ---------------------------------------------------------------------------

cmd_cc_s_c = $(CC) $(c_flags) -fverbose-asm -S -o $@ $<
%.s: %.c
	@echo "CC	$@"
	$(Q)$(cmd_cc_s_c)
	@scripts/basic/fixdep.sh $(depfile) $@ '$(cmd_cc_s_c)' $(dot-target).cmd

cmd_cc_i_c = $(CPP) $(c_flags) -dD -o $@ $<
%.i: %.c FORCE
	@echo "CPP	$@"
	$(Q)$(cmd_cc_i_c)
	$(Q)less $@

cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<
%.o: %.c
	$(prt_checker)
	$(cmd_checker)
	@echo "CC	$@"
	$(Q)$(cmd_cc_o_c)
	@scripts/basic/fixdep.sh $(depfile) $@ '$(cmd_cc_o_c)' $(dot-target).cmd

# Compile assembler sources (.S)
# ---------------------------------------------------------------------------

cmd_cc_s_S = $(CPP) $(a_flags) -dD -o $@ $<
%.s: %.S FORCE
	@echo "CPP	$@"
	$(Q)$(cmd_cc_s_S)

cmd_cc_o_S = $(CC) $(a_flags) -c -o $@ $<
%.o: %.S
	@echo "AS	$@"
	$(Q)$(cmd_cc_o_S)
	@scripts/basic/fixdep.sh $(depfile) $@ '$(cmd_cc_o_S)' $(dot-target).cmd

# ---------------------------------------------------------------------------
cmd_cc_lds = $(CPP) -x assembler-with-cpp -P -D__ASSEMBLY__ $(cpp_flags)   -o $@ $<
%.lds: %.lds.in
	@echo "LDS	$@"
	$(Q)$(cmd_cc_lds) 
	@scripts/basic/fixdep.sh $(depfile) $@ '$(cmd_cc_o_c)' $(dot-target).cmd

%.bin: %
	@echo "BIN	$<"
	$(Q)$(OBJCOPY) -O binary $< $@
# ---------------------------------------------------------------------------
%.a:
	@echo "AR	$@"
	@if [ -n "$(filter-out $^,$(deps_$@))" ]; then rm -f $@; fi	# rm the lib if it contains old members
	$(Q)$(AR) crST $@ $^
	@echo "deps_$@ := $^" > $(depfile) #$(@D)/.$(@F).d
# ---------------------------------------------------------------------------

# Read all saved command lines and dependencies for the $(targets) we
# may be building above.
# As an optimization, we don't need to read them if the target does not
# exist, we will rebuild anyway in that case.

targets := $(sort $(targets))
cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif


.PHONY: FORCE

FORCE:

asm-offsets := arch/$(CONFIG_ARCH)/include/asm-offsets.h
$(asm-offsets): arch/$(CONFIG_ARCH)/asm-offsets.s
	@echo "GEN	$@"
	@( echo "#ifndef __ASM_OFFSETS_H__"; \
	echo "#define __ASM_OFFSETS_H__"; \
	echo "/*"; \
	echo " * DO NOT MODIFY."; \
	echo " *"; \
	echo " * This file was generated by Kbuild"; \
	echo " *"; \
	echo " */"; \
	echo ""; \
	sed -ne '/^->/{s:^->\([^ ]*\) #*\([^ ]*\) \(.*\)<-.*:#define	\1	\2	/* \3 */:; s:->::; p;}' $<; \
	echo ""; \
	echo "#endif" ) > $@
-include arch/$(CONFIG_ARCH)/.asm-offsets.s.cmd

scripts/Makefile.build: scripts/basic/fixdep
scripts/basic/fixdep: scripts/basic/fixdep.c
scripts/basic/%:
	$(Q)$(MAKE) -f scripts/Makefile.host curdir=scripts/basic $@
